```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE)
```

Meta-analysis for genomic data
========================================================
A Bioc2014 workshop
--------------------------------------------------------

author: Levi Waldron  
date: August 1, 2014

Outline
========================================================
- Introduction and Motivation
- Preparation
  - Finding datasets
  - Downloading datasets
  - Curation
  - Preprocessing and gene mapping
  - Duplicate checking
- Fixed and Random Effects Synthesis
- Assessing Heterogeneity
- Leave-one-dataset-in and Leave-one-dataset-out Validation of Prediction Models

Scope: what is meta-analysis?
========================================================
- Broad definition: the full scope of among-study analysis
- Narrow definition: a synthesis of per-study estimates

- Not: pooling of per-patient data

> “We understand meta-analysis as being the use of statistical techniques to combine the results of studies addressing the same question into a summary measure.”
   <br /> <br /> Villar et al. (2001)

Scope: what is meta-analysis?
========================================================
![Baggstrom et al.](figures/Baggstrometal.png)

Classic meta-analysis: Third-generation agents compared with best supportive care. Differences in 1-year survival proportions (Baggstrom _et al._ 2007).

- In genomics we extend to thousands of variables

Systematic meta-analysis
========================================================
- Related to systematic review
- Formalizes the study inclusion and exclusion process
- PRISMA Guidelines (rarely cited, less relevant for genomics?)

Preparation: finding datasets
========================================================
- Systematic literature review
- Gene Expression Omnibus (GEO)
  - web page (filter by species, disease, sample size)
  - GEOmetadb Bioconductor package (requires SQL knowledge)
- ArrayExpress
  - web page also includes many GEO datasets
  - Bioconductor package has search features
- InSilicoDB
  - better curation, lower coverage

Preparation: downloading datasets
========================================================
- GEOquery::getGEO() is a workshorse
  - maximum coverage, minimum frills
  - all metadata included, most is irrelevant
  - large studies limited to 256 patients per list element
  - processed data as uploaded by authors -> list of ExpressionSets
  - no probeset to gene mapping

Preparation: downloading datasets (cont'd)
========================================================
- A couple helpful functions from [LeviRmisc](https://github.com/lwaldron/LeviRmisc)
   - getGEO2(): consolidate and simplify getGEO() output
   - geoPmidLookup(): look up experiment and publication data from GEO and Pubmed, put in dataframe
```{r, eval=FALSE}
library(LeviRmisc)
df <- geoPmidLookup(c("GSE26712", "PMID18593951")) 
```


Preparation: curation
========================================================
- per-sample metadata must be standardized across studies
- process is error-prone and it is easy to miss mistakes in high-throughput analysis
- therefore template-based syntax checking highly recommendable, e.g. see my [template](https://bitbucket.org/lwaldron/curatedovariandata/src/tip/curation/ovarian/src/template_ov.csv) and [checker](https://bitbucket.org/lwaldron/curatedovariandata/src/tip/src/checkCurated.R) for [curatedOvarianData](http://www.bioconductor.org/packages/release/data/experiment/html/curatedOvarianData.html).

Preparation: preprocessing and gene mapping
========================================================
- it is possible and desirable to synthesize across array platforms
- common preprocessing is desirable but not necessary
  - deal with non-standardized preprocessing through gene scaling, e.g. z-score
- must map probeset IDs to common gene identifiers:
  - if using a representative probeset for a gene, best to use the same one in each dataset
  - alternatively, simply average redundant probesets

Preparation: duplicate checking
========================================================
- duplicate samples bias meta-analysis
- be very cautious of multiple studies from the same institution - check sample identifiers and expression profiles
- [doppelgangR](https://github.com/lwaldron/doppelgangR/) package for high-throughput duplicate checking


Fixed and Random Effects Synthesis
========================================================
Fixed-effects model:
$$\hat{\theta_k} = \theta + \sigma_k \epsilon_k, \; \epsilon_k \stackrel{iid}{\sim} N(0, 1)$$

Random-effects model:
$$\hat{\theta_k} = \theta + \mu_k + \sigma_k \epsilon_k, \; \epsilon_k \stackrel{iid}{\sim} N(0, 1); \mu_k \stackrel{iid}{\sim} N(0, \tau^2)$$

$$
\begin{align*}
\textrm{where: }\hat{\theta_k} &= \textrm{effect size estimate from study}\, k \\
\theta &= \textrm{synthesized effect size} \\
\sigma_k &= \textrm{standard error of effect size in study}\, k \\
\epsilon_k &= \textrm{within-study error term}\\
\mu_k &= \textrm{between-study (random-effects) error term in RE model}\\
\tau^2 &= \textrm{variance of "true effects" across studies in RE model}
\end{align*}
$$

Fixed effects model
========================================================
$$\hat{\theta_k} = \theta + \sigma_k \epsilon_k, \; \epsilon_k \stackrel{iid}{\sim} N(0, 1)$$

Maximum-likelihood estimate of $\theta$ under fixed-effects model is:

$$ 
\hat{\theta}_F = \frac{\sum\limits_{k=1}^{K}w_k \hat{\theta}_k}{\sum\limits_{k=1}^K w_k}\\
\textrm{where: } w_k = 1 / \sigma_k^2
$$

_i.e._, the synthesized effect is the average of the study-specific effects, weighted by the inverse squared standard error

Fixed effects model (cont'd)
========================================================
- Variance of fixed-effects estimate is the inverse mean of the study-specific weights:
$$
S.E.(\hat{\theta}_F) = \sqrt{\frac{1}{\sum\limits_{k=1}^K w_k}}
$$

$$
\begin{align*}
\textrm{where }w_k &= 1 / \sigma_k^2,\\
\sigma_k &= \textrm{study-specific standard errors}
\end{align*}
$$

- $(1-\alpha)$ confidence interval: 
$$ \hat{\theta}_F \pm z_{(1-\alpha/2)} \times S.E.(\hat{\theta}_F) $$

Random effects model
========================================================
- DerSimonian and Laird RE estimate of $\hat\theta_R$:

$$ 
\begin{align*}
\scriptsize
\hat{\theta}_R &= \scriptsize
\frac{\sum\limits_{k=1}^{K}w^*_k \hat{\theta}_k}{\sum\limits_{k=1}^K w^*_k}\\
\textrm{where: } w^*_k &= 1 / (\tau^2 + \sigma_k^2)\\
\end{align*}
$$

- with no heterogeneity ($\tau = 0$), this converges to the FE estimate
- with large heterogeneity ($\tau \rightarrow \infty$) it is the simple average of individual study estimates

Random effects model (cont'd)
========================================================
- Definitions of Q and S:
$$
\begin{align*}
\hat{\tau}^2 &= max\left(\frac{Q-(K-1)}{S}, 0\right),\\
Q &= \sum\limits_{k=1}^K w_k (\hat\theta_k - \hat\theta_F)^2,\\ 
S &= \sum\limits_{k=1}^K w_k - \frac{\sum\limits_{k=1}^K w_k^2}{\sum\limits_{k=1}^K w_k}
\end{align*}
$$

Assessing Heterogeneity
========================================================
- Standard hypothesis test for heterogeneity: under the null hypothesis of no heterogeneity between studies ($\tau = 0$), 
$$
Q \sim \chi^2_{K-1}
$$
 
- Standard descriptions of heterogeneity: 
  - $\tau^2$: estimate of total amount of heterogeneity
  - $I^2$: % of total variability due to heterogeneity
  - $H^2$: total variability / within-study variance

- For further info:
   - Viechtbauer W: _Conducting meta-analyses in R with the metafor package._ J. Stat. Softw. 2010.

Example 1: Is CXCL12 gene a prognostic factor for ovarian cancer? 
========================================================
Load the curatedOvarianData package, look at available datasets:
```{r}
library(curatedOvarianData)
data(package="curatedOvarianData")
```

Load (and check out) rules defined in default configuration file:
```{r}
download.file("https://bitbucket.org/lwaldron/ovrc4_sigvalidation/raw/tip/input/patientselection.config", method="wget", destfile="patientselection.config")
source("patientselection.config")
impute.missing <- TRUE
keep.common.only <- TRUE
```

Example 1 (cont'd)
========================================================
Create list of ExpressionSets meeting criteria:
```{r, results="hide"}
download.file("https://bitbucket.org/lwaldron/ovrc4_sigvalidation/raw/tip/src/createEsetList_source.R", method="wget", destfile="createEsetList.R")
source("createEsetList.R")
```

```{r}
length(esets)
```

Example 1 (cont'd)
========================================================
- Calculate "effect size" log(HR) and S.E. for one dataset:
<small>
```{r}
runCox <- function(eset, probeset="CXCL12"){
  library(survival)
  eset$y <- Surv(eset$days_to_death, eset$vital_status == "deceased")
  if(probeset %in% featureNames(eset)){
    obj <- coxph(eset$y ~ scale(t(exprs(eset[probeset, ]))[, 1]))
    output <- c(obj$coefficients, sqrt(obj$var))
    names(output) <- c("log.HR", "SE")
  }else{output <- NULL}
    output}
runCox(esets[[1]])
```
</small>

Example 1 (cont'd)
========================================================
- Calculate "effect size" (HR) and Standard Error for all datasets:

```{r}
study.coefs <- t(sapply(esets, runCox)); head(study.coefs)
```

Example 1 (cont'd): forest plot
========================================================
```{r, height=5}
library(metafor)
res.fe <- metafor::rma(yi=study.coefs[, 1], sei=study.coefs[, 2], method="FE")
forest.rma(res.fe, slab=gsub("_eset$","",rownames(study.coefs)), atransf=exp)
```

Example 1 (cont'd): FE vs. RE
========================================================
```{r}
(res.re <- metafor::rma(yi=study.coefs[, 1], sei=study.coefs[, 2], method="DL"))
```

Example 1 (cont'd): closing comments
========================================================
- Between-study variability is completely consistent with _zero heterogeneity_ between studies
- Replace simple univariate regression with multivariate regression to correct for known clinical factors (e.g. see [Ganzfried _et. al._ 2013](http://database.oxfordjournals.org/content/2013/bat013.full.pdf+html))
- Replace HR with any coefficient + S.E.
- Replace single probeset with any fully-specified score or classifier
  - noting that random gene sets are likely to be prognostic ([Waldron _et al._ JNCI 2014](http://jnci.oxfordjournals.org/cgi/content/full/dju049?ijkey=Ka4IzzSGdcMM131&keytype=ref), [Venet _et al._ PLoS Comp Bio 2011](http://dx.plos.org/10.1371/journal.pcbi.1002240))

Example 2: rank all genes by prognostic association
========================================================
<small>
```{r, eval=TRUE}
if( !require("survHD") || package.version("survHD") != "0.5.0" ){
    library(devtools)
    install_url("https://bitbucket.org/lwaldron/survhd/downloads/survHD_0.5.0.tar.gz")
}
download.file("https://bitbucket.org/lima1/ovrc4_signew/raw/tip/src/metaCMA.R", destfile="metaCMA.R", method="wget")
source("metaCMA.R")
gene.coefs <- metaCMA.coefs(esets)
FE.res <- metaCMA.opt(esets=esets, coefs=gene.coefs, rma.method="FE", n=200)
```

[Riester _et al._ JNCI 2014](http://jnci.oxfordjournals.org/content/early/2014/04/03/jnci.dju048.full?keytype=ref&ijkey=jtsznWsOzdpfQza) - see [Bitbucket page](https://bitbucket.org/lima1/ovrc4_signew) to reproduce paper and find helpful tools
</small>

Example 3: Leave-one-dataset-out validation
========================================================
- Validation of prediction models
- Use 1 study to test, K-1 studies to train
- Use meta-analysis of K-1 studies to get univariate coefficients _e.g._ to generate Tukey's "Compound Covariate" model 
```{r, eval=TRUE}
LODO.res <- metaCMA(esets,coefs=gene.coefs,n=200, rma.method="FE")
```

Example 3: Leave-one-dataset-out validation (cont'd)
========================================================

&nbsp;

<img src="figures/RiesterSuppS10.png" height="500px" />

***
  
&nbsp;  
&nbsp;  
&nbsp;
  
Leave-one-dataset-out validation of a survival signature.  ([Riester _et al._ JNCI 2014](http://jnci.oxfordjournals.org/content/early/2014/04/03/jnci.dju048.full?keytype=ref&ijkey=jtsznWsOzdpfQza))

Leave-one-dataset-in validation
========================================================
left: 70%
- Independent datasets for evaluation of prediction models or gene signatures
- Train and test using all dataset pairs ([Waldron _et al._ JNCI 2014](http://jnci.oxfordjournals.org/cgi/content/full/dju049?ijkey=Ka4IzzSGdcMM131&keytype=ref), [Bernau _et al._ Bioinformatics 2014](http://bioinformatics.oxfordjournals.org/content/30/12/i105), [Zhao _et al._ Bioinformatics 2014](http://bioinformatics.oxfordjournals.org/content/early/2014/07/23/bioinformatics.btu488.long))

***

![zmatrix](figures/zmatrix.png)

Leave-one-dataset-in validation (cont'd)
========================================================
<img src="figures/F5.large.jpg" width="800px" height="400px" />
<small>
"Improvement over random signatures (IOR)" score of gene signatures relative to random gene signatures, equalizing the influences of authors’ algorithms for generating risk scores, quality of the original training data, and gene signature size ([Waldron _et al._ JNCI 2014](http://jnci.oxfordjournals.org/cgi/content/full/dju049?ijkey=Ka4IzzSGdcMM131&keytype=ref)).   
source scripts: [genMumatrix.R](https://bitbucket.org/lwaldron/ovrc4_sigvalidation/src/tip/src/genMumatrix.R) and [analyseMumatrix.R](https://bitbucket.org/lwaldron/ovrc4_sigvalidation/src/tip/src/analyseMumatrix.R)
</small>

Conclusions
========================================================
- many alternatives for meta-analysis of genomics experiments have been proposed, none as flexible or well-understood as traditional approaches
- metafor R package is highly recommendable and well-documented [Viechtbauer 2010](http://www.jstatsoft.org/v36/i03/paper)
- simple pooling makes it difficult to assess heterogeneity arising from genomic or clinical data

DIY exercise: suboptimal debulking
========================================================
- Change patientselection.config filter to keep genes with _debulking_ variable
- Identify the most differentially expressed gene with respect to optimal / suboptimal debulking. Manually:
   - Use rowttests() from _genefilter_ package to get per-study fold-change and standard error
   - Convert t-statistic and difference in means (dm) to S.E.: 
   $$t=\frac{dm}{S.E.}$$
   - Synthesize per-gene using metafor::rma()
- Automatically: Use metaCMA.coefs() and metaCMA.opt()
